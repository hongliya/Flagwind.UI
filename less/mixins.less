//
// * Flagwind.UI v1.0.0
// * Copyright 2014 Flagwind Inc. All rights reserved.
// * Licensed under the MIT License.
// * https://github.com/Flagwind/Flagwind.UI/blob/master/LICENSE
//

// ============================= 通用(Normal) ============================ //

//
// #public 清除浮动。
//
.clearfix()
{
    &:before,
    &:after
    {
        display: table;
        content: " ";
    }

    &:after
    {
        clear: both;
    }
}

// ============================= 布局(Layout) ============================ //

//
// #public 显示元素。
//
.responsive-visibility()
{
    display: block !important;

    table&
    {
        display: table;
    }

    tr&
    {
        display: table-row !important;
    }

    th&,
    td&
    {
        display: table-cell !important;
    }
}

//
// #public 隐藏元素。
//
.responsive-invisibility()
{
    display: none !important;
}

//
// #public 定义布局份数。
//
.define-layout-flexes()
{
    .flex(@index)
    {
        @item: ~".flex-xs-@{index}, .flex-sm-@{index}, .flex-md-@{index}, .flex-lg-@{index}";

        .flex((@index + 1), @item);
    }

    .flex(@index, @list) when (@index =< @layout-flexes)
    {
        @item: ~".flex-xs-@{index}, .flex-sm-@{index}, .flex-md-@{index}, .flex-lg-@{index}";

        .flex((@index + 1), ~"@{list}, @{item}");
    }

    .flex(@index, @list) when (@index > @layout-flexes)
    {
        @{list}
        {
            position: relative;
            min-height: 1px;
            padding-left: (@layout-gutter-width / 2);
            padding-right: (@layout-gutter-width / 2);
        }
    }

    .flex(1);
}

//
// #public 生成布局份数。
//
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.build-layout-flexes(@size)
{
    .float-layout-flexes(@size);
    .loop-layout-flexes(width, @layout-flexes, @size);
    .loop-layout-flexes(push, @layout-flexes, @size);
    .loop-layout-flexes(pull, @layout-flexes, @size);
    .loop-layout-flexes(offset, @layout-flexes, @size);
}

//
// #private 浮动布局份数。
//
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.float-layout-flexes(@size)
{
    .flex(@index)
    {
        @item: ~".flex-@{size}-@{index}";

        .flex((@index + 1), @item);
    }

    .flex(@index, @list) when (@index =< @layout-flexes)
    {
        @item: ~".flex-@{size}-@{index}";

        .flex((@index + 1), ~"@{list}, @{item}");
    }

    .flex(@index, @list) when (@index > @layout-flexes)
    {
        @{list}
        {
            float: left;
        }
    }

    .flex(1);
}

//
// #private 计算布局份数的宽度。
//
// #param @type [width] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.calc-layout-flex(@type, @index, @size) when (@type = width) and (@index > 0)
{
    .flex-@{size}-@{index}
    {
        width: percentage((@index / @layout-flexes));
    }
}

//
// #private 计算布局份数的排序。
//
// #param @type [push] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.calc-layout-flex(@type, @index, @size) when (@type = push) and (@index > 0)
{
    .flex-@{size}-push-@{index}
    {
        left: percentage((@index / @layout-flexes));
    }
}

//
// #private 计算布局份数的排序。
//
// #param @type [push] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.calc-layout-flex(@type, @index, @size) when (@type = push) and (@index = 0)
{
    .flex-@{size}-push-0
    {
        left: auto;
    }
}

//
// #private 计算布局份数的排序。
//
// #param @type [pull] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.calc-layout-flex(@type, @index, @size) when (@type = pull) and (@index > 0)
{
    .flex-@{size}-pull-@{index}
    {
        right: percentage((@index / @layout-flexes));
    }
}

//
// #private 计算布局份数的排序。
//
// #param @type [pull] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.calc-layout-flex(@type, @index, @size) when (@type = pull) and (@index = 0)
{
    .flex-@{size}-pull-0
    {
        right: auto;
    }
}

//
// #private 计算布局份数的排序。
//
// #param @type [pull] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.calc-layout-flex(@type, @index, @size) when (@type = offset)
{
    .flex-@{size}-offset-@{index}
    {
        margin-left: percentage((@index / @layout-flexes));
    }
}

//
// #private 递归计算布局份数。
//
// #param @type [width|pull|push|offset] 必选项，类型。
// #param @index [number] 必选项，索引。
// #param @size [xs|sm|md|lg] 必选项，尺寸。
//
.loop-layout-flexes(@type, @index, @size) when (@index >= 0)
{
    .calc-layout-flex(@type, @index, @size);

    .loop-layout-flexes(@type, (@index - 1), @size);
}

// ============================= 其他(Other) ============================= //

.tab-focus()
{
    outline: thin dotted;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

.txt-emphasis-variant(@color)
{
    color: @color;

    a&:hover
    {
        color: darken(@color, 10%);
    }
}

.bg-variant(@color)
{
    background-color: @color;

    a&:hover
    {
        background-color: darken(@color, 10%);
    }
}
